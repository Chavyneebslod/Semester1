package Auctioning;


/**
* Auctioning/bHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from src/auctioning.idl
* Tuesday, 30 November 2010 12:56:02 o'clock GMT
*/

abstract public class bHelper
{
  private static String  _id = "IDL:Auctioning/b:1.0";

  public static void insert (org.omg.CORBA.Any a, Auctioning.b that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static Auctioning.b extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  private static boolean __active = false;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      synchronized (org.omg.CORBA.TypeCode.class)
      {
        if (__typeCode == null)
        {
          if (__active)
          {
            return org.omg.CORBA.ORB.init().create_recursive_tc ( _id );
          }
          __active = true;
          org.omg.CORBA.StructMember[] _members0 = new org.omg.CORBA.StructMember [8];
          org.omg.CORBA.TypeCode _tcOf_members0 = null;
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[0] = new org.omg.CORBA.StructMember (
            "itemRef",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[1] = new org.omg.CORBA.StructMember (
            "poster",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[2] = new org.omg.CORBA.StructMember (
            "itemName",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[3] = new org.omg.CORBA.StructMember (
            "itemDesc",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_double);
          _members0[4] = new org.omg.CORBA.StructMember (
            "minBid",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_longlong);
          _members0[5] = new org.omg.CORBA.StructMember (
            "endTime",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_double);
          _members0[6] = new org.omg.CORBA.StructMember (
            "winningBid",
            _tcOf_members0,
            null);
          _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
          _members0[7] = new org.omg.CORBA.StructMember (
            "winningBidder",
            _tcOf_members0,
            null);
          __typeCode = org.omg.CORBA.ORB.init ().create_struct_tc (Auctioning.bHelper.id (), "b", _members0);
          __active = false;
        }
      }
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static Auctioning.b read (org.omg.CORBA.portable.InputStream istream)
  {
    Auctioning.b value = new Auctioning.b ();
    value.itemRef = istream.read_string ();
    value.poster = istream.read_string ();
    value.itemName = istream.read_string ();
    value.itemDesc = istream.read_string ();
    value.minBid = istream.read_double ();
    value.endTime = istream.read_longlong ();
    value.winningBid = istream.read_double ();
    value.winningBidder = istream.read_string ();
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, Auctioning.b value)
  {
    ostream.write_string (value.itemRef);
    ostream.write_string (value.poster);
    ostream.write_string (value.itemName);
    ostream.write_string (value.itemDesc);
    ostream.write_double (value.minBid);
    ostream.write_longlong (value.endTime);
    ostream.write_double (value.winningBid);
    ostream.write_string (value.winningBidder);
  }

}
